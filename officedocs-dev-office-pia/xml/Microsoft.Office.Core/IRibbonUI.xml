<Type Name="IRibbonUI" FullName="Microsoft.Office.Core.IRibbonUI">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f912fe8c8db15a87c031bae5d14f2fe64d719567" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20661032" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonUI" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonUI" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonUI" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonUI" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonUI" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C03A7-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <b>customUI</b> タグで指定された <b>onLoad</b> プロシージャによって返されるオブジェクトです。そのオブジェクトには、コントロール プロパティを無効化するメソッドやユーザー インターフェイスの表示を更新するメソッドが含まれています。</summary>
    <remarks>
      <para>リボン ユーザー インターフェイス (UI) をカスタマイズするには、COM アドインでコールバック プロシージャを使用します。ホスト アプリケーションを起動すると、 <b>onLoad</b>コールバック プロシージャが呼び出されます。 コールバック プロシージャは、ユーザー インターフェイス (UI) をポイントする<b>IRibbonUI</b>オブジェクトを返します。<b>Invalidate</b>、 <b>InvalidateControl</b>、および<b>更新</b>メソッドを呼び出すには、そのオブジェクトを使用できます。</para>
      <para />
    </remarks>
    <example>
      <para>次の例では、ホスト アプリケーションを起動し、リボン UI を表す<b>IRibbonUI</b>オブジェクトを作成するプロシージャを呼び出す、 <b>onLoad</b>イベント プロシージャがトリガーされます。 次に、コールバック プロシージャが定義されているすべてのキャッシュされたコントロールを無効にし、UI を更新します</para>。
      <para>カスタム リボンの読み込みを Office の XML マークアップは、次:</para><code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code><para>は、 <b>onLoad</b>イベントのコールバック メソッド:</para><code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code></example>
  </Docs>
  <Members>
    <Member MemberName="ActivateTab">
      <MemberSignature Language="C#" Value="public void ActivateTab (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTab([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTab(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTab (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTab(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">有効にするユーザー設定のリボン タブの識別子を指定します。</param>
        <summary>指定したユーザー設定タブをアクティブにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabMso">
      <MemberSignature Language="C#" Value="public void ActivateTabMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">有効にするユーザー設定のリボン タブの識別子を指定します。</param>
        <summary>指定した組み込みタブをアクティブにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabQ">
      <MemberSignature Language="C#" Value="public void ActivateTabQ (string ControlID, string Namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabQ([in]string ControlID, [in]string Namespace) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabQ(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabQ (ControlID As String, Namespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabQ(System::String ^ ControlID, System::String ^ Namespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
        <Parameter Name="Namespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">有効にするユーザー設定のリボン タブの識別子を指定します。</param>
        <param name="Namespace">タブ要素の名前空間を指定します。</param>
        <summary>Microsoft Office Fluent リボン UI 上の指定されたユーザー設定タブをアクティブにします。 完全修飾名の識別子が含まれているタブとタブの名前空間を使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リボン ユーザー インターフェイスのすべてのコントロールに対してキャッシュされた値を無効にします。</summary>
        <remarks>
          <para>リボン UI をカスタマイズするには、COM アドインでコールバック プロシージャを使用します。アドインでコールバックの実装ごとに、応答がキャッシュされます。 など、追加のライターでは、ボタンに<b>getImage</b>コールバック プロシージャを実装する場合、関数は 1 回、そのイメージがロードし、し、イメージを更新する場合は、キャッシュされたイメージは、使用、プロシージャを呼び出すのではなく。このプロセスは、インプレースで追加の信号をキャッシュされた値が無効である時、 <b>Invalidate</b>メソッドを使用して、コールバック プロシージャが再び呼び出されてし、結果がキャッシュされます。 アドインをことができますし、強制的に UI の更新を直ちに、 <b>Refresh</b>メソッドを呼び出すことによって。</para>
          <para />
        </remarks>
        <example>
          <para>次の例では、ホスト アプリケーションを起動し、リボン UI を表すオブジェクトを作成するプロシージャを呼び出す、 <b>onLoad</b>イベント プロシージャがトリガーされます。 次に、コールバック プロシージャが定義されているすべての ui コントロールを無効にし、UI を更新します</para>。
          <para>カスタム リボンの読み込みを Office の XML マークアップは、次:</para><code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code><para>は、 <b>onLoad</b>イベントのコールバック メソッド:</para><code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code></example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControl">
      <MemberSignature Language="C#" Value="public void InvalidateControl (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControl([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControl (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControl(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">無効化するコントロールの ID を指定します。</param>
        <summary>リボン ユーザー インターフェイスの 1 つのコントロールに対してキャッシュされた値を無効にします。</summary>
        <remarks>
          <para>リボン UI をカスタマイズするには、COM アドインでコールバック プロシージャを使用します。アドインでコールバックの実装ごとに、応答がキャッシュされます。 など、追加のライターでは、ボタンに<b>getImage</b>コールバック プロシージャを実装する場合、関数は 1 回、そのイメージがロードし、し、イメージを更新する場合は、キャッシュされたイメージは、使用、プロシージャを呼び出すのではなく。このプロセスは場所にアドインが通知されるキャッシュされた値が無効である<b>InvalidateControl</b>メソッドを使用する時になるまでコントロールのコールバック プロシージャが再び呼び出されて、戻り値の応答をキャッシュします。</para>
          <para />
        </remarks>
        <example>
          <para>次の例では、ホスト アプリケーションを起動し、リボン UI を表すオブジェクトを作成するプロシージャを呼び出す、 <b>onLoad</b>イベント プロシージャがトリガーされます。 次に、コールバック プロシージャが定義されている UI のコントロールを無効にし、UI を更新する</para>。
          <para>カスタム リボンの読み込みを Office の XML マークアップは、次:</para><code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code><para>は、 <b>onLoad</b>イベントのコールバック メソッド:</para><code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code></example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControlMso">
      <MemberSignature Language="C#" Value="public void InvalidateControlMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControlMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControlMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControlMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControlMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">無効化するコントロールの識別子を指定します。</param>
        <summary>組み込みのコントロールを無効にするのに使用します。</summary>
        <remarks>
          <para>コントロールを無効に画面を再描画しを実行するには、そのコントロールに関連付けられているすべてのコールバック プロシージャが発生します。</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>