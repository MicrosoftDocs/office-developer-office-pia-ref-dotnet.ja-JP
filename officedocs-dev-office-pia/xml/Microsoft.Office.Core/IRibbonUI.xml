<Type Name="IRibbonUI" FullName="Microsoft.Office.Core.IRibbonUI">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f912fe8c8db15a87c031bae5d14f2fe64d719567" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20661032" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonUI" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonUI" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonUI" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonUI" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonUI" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C03A7-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="50708-p101">
        <b>customUI</b> タグで指定された <b>onLoad</b> プロシージャによって返されるオブジェクトです。そのオブジェクトには、コントロール プロパティを無効化するメソッドやユーザー インターフェイスの表示を更新するメソッドが含まれています。</span>
      <span class="sxs-lookup">
        <span data-stu-id="50708-p101">The object that is returned by the <b>onLoad</b> procedure specified on the <b>customUI</b> tag.  The object contains methods for invalidating control properties and for refreshing the user interface.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="50708-103">
        <para>リボン ユーザー インターフェイス (UI) をカスタマイズするには、COM アドインでコールバック プロシージャを使用します。ホスト アプリケーションを起動すると、 <b>onLoad</b>コールバック プロシージャが呼び出されます。 コールバック プロシージャは、ユーザー インターフェイス (UI) をポイントする<b>IRibbonUI</b>オブジェクトを返します。<b>Invalidate</b>、 <b>InvalidateControl</b>、および<b>更新</b>メソッドを呼び出すには、そのオブジェクトを使用できます。</para>
        <para />
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="50708-103">
          <para>You can customize the Ribbon user interface (UI) by using callback procedures in COM add-ins. When the host application starts, the <b>onLoad</b> callback procedure is called.  The callback procedure then returns a <b>IRibbonUI</b> object pointing to the user interface (UI). YOu can use that object to invoke the <b>Invalidate</b>, <b>InvalidateControl</b>, and <b>Refresh</b> methods.</para>
          <para />
        </span>
      </span>
    </remarks>
    <example>
      <span data-ttu-id="50708-104">
        <para>次の例では、ホスト アプリケーションを起動し、リボン UI を表す<b>IRibbonUI</b>オブジェクトを作成するプロシージャを呼び出す、 <b>onLoad</b>イベント プロシージャがトリガーされます。 次に、コールバック プロシージャが定義されているすべてのキャッシュされたコントロールを無効にし、UI を更新します</para>。
      <para>カスタム リボンの読み込みを Office の XML マークアップは、次:</para><code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code><para>は、 <b>onLoad</b>イベントのコールバック メソッド:</para><code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code></span>
      <span class="sxs-lookup">
        <span data-stu-id="50708-104">
          <para>In the following example, starting the host application triggers the <b>onLoad</b> event procedure  that then calls a procedure which creates a <b>IRibbonUI</b> object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the cached controls and then refreshes the UI.</para>
          <para>The following is the XML markup for Office to load the custom ribbon:</para>
          <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
          <para>The following is the callback method for the <b>onLoad</b> event:</para>
          <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
        </span>
      </span>
    </example>
  </Docs>
  <Members>
    <Member MemberName="ActivateTab">
      <MemberSignature Language="C#" Value="public void ActivateTab (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTab([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTab(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTab (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTab(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="50708-105">有効にするユーザー設定のリボン タブの識別子を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-105">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50708-106">指定したユーザー設定タブをアクティブにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-106">Activates the specified custom tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabMso">
      <MemberSignature Language="C#" Value="public void ActivateTabMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="50708-107">有効にするユーザー設定のリボン タブの識別子を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-107">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50708-108">指定した組み込みタブをアクティブにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-108">Activates the specified built-in tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabQ">
      <MemberSignature Language="C#" Value="public void ActivateTabQ (string ControlID, string Namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabQ([in]string ControlID, [in]string Namespace) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabQ(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabQ (ControlID As String, Namespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabQ(System::String ^ ControlID, System::String ^ Namespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
        <Parameter Name="Namespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="50708-109">有効にするユーザー設定のリボン タブの識別子を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-109">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <param name="Namespace">
          <span data-ttu-id="50708-110">タブ要素の名前空間を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-110">Specifies the namespace of the tab element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50708-111">Microsoft Office Fluent リボン UI 上の指定されたユーザー設定タブをアクティブにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-111">Activates the specified custom tab on the Microsoft Office Fluent Ribbon UI.</span>
          </span>
          <span data-ttu-id="50708-112">完全修飾名の識別子が含まれているタブとタブの名前空間を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-112">Uses the fully qualified name of the tab which includes the identifier and the namespace of the tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="50708-113">リボン ユーザー インターフェイスのすべてのコントロールに対してキャッシュされた値を無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-113">Invalidates the cached values for all of the controls of the Ribbon user interface.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="50708-114">
            <para>リボン UI をカスタマイズするには、COM アドインでコールバック プロシージャを使用します。アドインでコールバックの実装ごとに、応答がキャッシュされます。 など、追加のライターでは、ボタンに<b>getImage</b>コールバック プロシージャを実装する場合、関数は 1 回、そのイメージがロードし、し、イメージを更新する場合は、キャッシュされたイメージは、使用、プロシージャを呼び出すのではなく。このプロセスは、インプレースで追加の信号をキャッシュされた値が無効である時、 <b>Invalidate</b>メソッドを使用して、コールバック プロシージャが再び呼び出されてし、結果がキャッシュされます。 アドインをことができますし、強制的に UI の更新を直ちに、 <b>Refresh</b>メソッドを呼び出すことによって。</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-114">
              <para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place until the add-in signals that the cached values are invalid by using the <b>Invalidate</b> method,  at which time, the callback procedure is again called and the return response is cached.  The add-in can then force an immediate update of the UI by calling the <b>Refresh</b> method.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="50708-115">
            <para>次の例では、ホスト アプリケーションを起動し、リボン UI を表すオブジェクトを作成するプロシージャを呼び出す、 <b>onLoad</b>イベント プロシージャがトリガーされます。 次に、コールバック プロシージャが定義されているすべての ui コントロールを無効にし、UI を更新します</para>。
          <para>カスタム リボンの読み込みを Office の XML マークアップは、次:</para><code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code><para>は、 <b>onLoad</b>イベントのコールバック メソッド:</para><code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code></span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-115">
              <para>In the following example,  starting the host application triggers the <b>onLoad</b> event  procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the controls on the UI and then refreshes the UI.</para>
              <para>The following is the XML markup for Office to load the custom ribbon:</para>
              <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
              <para>The following is the callback method for the <b>onLoad</b> event:</para>
              <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControl">
      <MemberSignature Language="C#" Value="public void InvalidateControl (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControl([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControl (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControl(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="50708-116">無効化するコントロールの ID を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-116">Specifies the ID of the control that will be invalidated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50708-117">リボン ユーザー インターフェイスの 1 つのコントロールに対してキャッシュされた値を無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-117">Invalidates the cached value for a single control on the Ribbon user interface.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="50708-118">
            <para>リボン UI をカスタマイズするには、COM アドインでコールバック プロシージャを使用します。アドインでコールバックの実装ごとに、応答がキャッシュされます。 など、追加のライターでは、ボタンに<b>getImage</b>コールバック プロシージャを実装する場合、関数は 1 回、そのイメージがロードし、し、イメージを更新する場合は、キャッシュされたイメージは、使用、プロシージャを呼び出すのではなく。このプロセスは場所にアドインが通知されるキャッシュされた値が無効である<b>InvalidateControl</b>メソッドを使用する時になるまでコントロールのコールバック プロシージャが再び呼び出されて、戻り値の応答をキャッシュします。</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-118">
              <para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place for the control until the add-in signals that the cached values are invalid by using the <b>InvalidateControl</b> method,  at which time, the callback procedure is again called and the return response is cached.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="50708-119">
            <para>次の例では、ホスト アプリケーションを起動し、リボン UI を表すオブジェクトを作成するプロシージャを呼び出す、 <b>onLoad</b>イベント プロシージャがトリガーされます。 次に、コールバック プロシージャが定義されている UI のコントロールを無効にし、UI を更新する</para>。
          <para>カスタム リボンの読み込みを Office の XML マークアップは、次:</para><code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code><para>は、 <b>onLoad</b>イベントのコールバック メソッド:</para><code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code></span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-119">
              <para>In the following example,  starting the host application triggers the <b>onLoad</b> event procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates a control on the UI and then refreshes the UI.</para>
              <para>The following is the XML markup for Office to load the custom ribbon:</para>
              <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
              <para>The following is the callback method for the <b>onLoad</b> event:</para>
              <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControlMso">
      <MemberSignature Language="C#" Value="public void InvalidateControlMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControlMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControlMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControlMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControlMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="50708-120">無効化するコントロールの識別子を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-120">Specified the identifier of the control that will be invalidated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50708-121">組み込みのコントロールを無効にするのに使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-121">Used to invalidate a built-in control.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="50708-122">
            <para>コントロールを無効に画面を再描画しを実行するには、そのコントロールに関連付けられているすべてのコールバック プロシージャが発生します。</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50708-122">
              <para>Invalidating a control repaints the screen and causes any callback procedures associated with that control to run.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>